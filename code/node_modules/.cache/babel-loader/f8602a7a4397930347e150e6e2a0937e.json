{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/okienayonoadu/beej copy 2/src/ImageUpload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; //import {Button} from '@material-ui/core';\n\nimport firebase from \"firebase\";\nimport logo from './beej.png';\nimport { storage, db } from './firebase';\nimport Modal from '@material-ui/core/Modal';\nimport { makeStyles } from '@material-ui/core/styles';\nimport './ImageUpload.css';\n/*Styling for modal. Code from material-ui.com*/\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3)\n  }\n}));\n\nfunction ImageUpload({\n  username\n}) {\n  _s();\n\n  const classes = useStyles(); // getModalStyle is not a pure function, we roll the style only on the first render\n\n  const [modalStyle] = useState(getModalStyle);\n  const [open, setOpen] = useState(false);\n  const [openImg, setOpenImg] = useState(false);\n  const [caption, setCaption] = useState('');\n  const [image, setImage] = useState(null); //state for the progress bar\n\n  const [progress, setProgress] = useState(0);\n\n  const handleChange = e => {\n    //handleChange function fires off an event\n    if (e.target.files[0]) {\n      //get the first file you selected\n      setImage(e.target.files[0]); //set the image in state to that file\n    }\n  };\n\n  const handleUpload = () => {\n    //access the storage in firebase, get a references to the folder images/ and store image there\n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\n    uploadTask.on(\"state_changed\",\n    /*provide snapshot of the image uploading progress via an equation*/\n    snapshot => {\n      //progress function ...\n      const progress = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100);\n      setProgress(progress);\n    }, error => {\n      //error function ..\n      console.log(error);\n      alert(error.message);\n    }, () => {\n      // complete function ...\n      storage.ref(\"images\").child(image.name).getDownloadURL() //GET DOWNLOAD LINK TO THE IMAGE\n      .then(url => {\n        //post image inside db\n        db.collection(\"posts\").add({\n          //get server timestamp so images are sorted by time posted\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n          caption: caption,\n          imageUrl: url //username: username\n\n        });\n        setProgress(0); //reset progress\n\n        setCaption(\"\");\n        setImage(null);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"imageupload\",\n    children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n      className: \"imageupload__progress\",\n      value: progress,\n      max: \"100\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter a caption...\",\n      onChange: event => setCaption(event.target.value),\n      value: caption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 13\n  }, this);\n}\n\n_s(ImageUpload, \"TiJQlHaW9DZ+wf7V+2zoWlYCBj0=\", false, function () {\n  return [useStyles];\n});\n\n_c = ImageUpload;\nexport default ImageUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageUpload\");","map":{"version":3,"sources":["/Users/okienayonoadu/beej copy 2/src/ImageUpload.js"],"names":["React","useState","firebase","logo","storage","db","Modal","makeStyles","getModalStyle","top","left","transform","useStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","ImageUpload","username","classes","modalStyle","open","setOpen","openImg","setOpenImg","caption","setCaption","image","setImage","progress","setProgress","handleChange","e","target","files","handleUpload","uploadTask","ref","name","put","on","snapshot","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","getDownloadURL","then","url","collection","add","timestamp","firestore","FieldValue","serverTimestamp","imageUrl","event","value"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\n//import {Button} from '@material-ui/core';\nimport firebase from \"firebase\";\nimport logo from './beej.png';\nimport {storage, db} from './firebase';\nimport Modal from '@material-ui/core/Modal';\nimport {makeStyles} from '@material-ui/core/styles';\nimport './ImageUpload.css';\n\n/*Styling for modal. Code from material-ui.com*/\nfunction getModalStyle() {\n    const top = 50\n    const left = 50\n  \n    return {\n      top: `${top}%`,\n      left: `${left}%`,\n      transform: `translate(-${top}%, -${left}%)`,\n    };\n  }\n  const useStyles = makeStyles((theme) => ({\n    paper: {\n      position: 'absolute',\n      width: 400,\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n  }));\n  \n\n\nfunction ImageUpload({username}) {\n    const classes = useStyles();\n    // getModalStyle is not a pure function, we roll the style only on the first render\n    const [modalStyle] = useState(getModalStyle);\n    const [open,setOpen] = useState(false);\n    const [openImg, setOpenImg] = useState(false);\n    const [caption, setCaption] = useState('');\n    const [image, setImage] = useState(null); //state for the progress bar\n    const [progress, setProgress] = useState(0);\n   \n    \n\n    const handleChange =  (e) => {//handleChange function fires off an event\n        if (e.target.files[0]) { //get the first file you selected\n            setImage(e.target.files[0]); //set the image in state to that file\n        }\n    };\n\n    const handleUpload = () => {\n        //access the storage in firebase, get a references to the folder images/ and store image there\n        const uploadTask = storage.ref(`images/${image.name}`).put(image);\n\n        uploadTask.on(\n            \"state_changed\",\n            /*provide snapshot of the image uploading progress via an equation*/\n            (snapshot) => {\n                //progress function ...\n                const progress = Math.round(\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n                );\n                setProgress(progress);\n            },\n            (error) => {\n                //error function ..\n                console.log(error);\n                alert(error.message);\n            },\n            () => {\n                // complete function ...\n                storage\n                    .ref(\"images\")\n                    .child(image.name)\n                    .getDownloadURL()   //GET DOWNLOAD LINK TO THE IMAGE\n                    .then(url => {\n                        //post image inside db\n                        db.collection(\"posts\").add({\n                            //get server timestamp so images are sorted by time posted\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            caption: caption,\n                            imageUrl: url,\n                            //username: username\n                        });\n\n                        setProgress(0); //reset progress\n                        setCaption(\"\");\n                        setImage(null);\n                    });\n            }\n        );\n    };\n\n    return (\n        \n      \n            \n            <div className=\"imageupload\">\n        <progress className=\"imageupload__progress\" value={progress} max=\"100\"/>\n           <input type=\"text\" placeholder='Enter a caption...' onChange={event => setCaption(event.target.value)} value={caption}/>\n           <input type=\"file\" onChange={handleChange} />\n           <button onClick={handleUpload}>Upload</button>\n            </div>\n              \n    )\n}\n\nexport default ImageUpload"]},"metadata":{},"sourceType":"module"}