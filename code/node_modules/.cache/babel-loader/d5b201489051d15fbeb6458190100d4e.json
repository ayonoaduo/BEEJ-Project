{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/okienayonoadu/beej copy 2/src/ImageUpload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; //import {Button} from '@material-ui/core';\n\nimport firebase from \"firebase\";\nimport { storage, db } from './firebase';\nimport './ImageUpload.css';\n\nfunction ImageUpload({\n  username\n}) {\n  _s();\n\n  const [caption, setCaption] = useState('');\n  const [image, setImage] = useState(null); //state for the progress bar\n\n  const [progress, setProgress] = useState(0);\n\n  const handleChange = e => {\n    //handleChange function fires off an event\n    if (e.target.files[0]) {\n      //get the first file you selected\n      setImage(e.target.files[0]); //set the image in state to that file\n    }\n  };\n\n  const handleUpload = () => {\n    //access the storage in firebase, get a references to the folder images/ and store image there\n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\n    uploadTask.on(\"state_changed\",\n    /*provide snapshot of the image uploading progress via an equation*/\n    snapshot => {\n      //progress function ...\n      const progress = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100);\n      setProgress(progress);\n    }, error => {\n      //error function ..\n      console.log(error);\n      alert(error.message);\n    }, () => {\n      // complete function ...\n      storage.ref(\"images\").child(image.name).getDownloadURL() //GET DOWNLOAD LINK TO THE IMAGE\n      .then(url => {\n        //post image inside db\n        db.collection(\"posts\").add({\n          //get server timestamp so images are sorted by time posted\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n          caption: caption,\n          imageUrl: url,\n          username: username\n        });\n        setProgress(0); //reset progress\n\n        setCaption(\"\");\n        setImage(null);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal //Sign up Modal\n  , {\n    open: open //state to keep track if its open\n    ,\n    onClose: () => setOpen(false) //onClose method. closes the model when anywhere else on the screen is clicked\n    ,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: modalStyle,\n      className: classes.paper,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"app__signup\",\n        children: [/*#__PURE__*/_jsxDEV(\"center\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"app__headerImage\",\n            src: logo,\n            alt: \"\",\n            width: \"50px\",\n            height: \"50px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"imageupload\",\n          children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n            className: \"imageupload__progress\",\n            value: progress,\n            max: \"100\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter a caption...\",\n            onChange: event => setCaption(event.target.value),\n            value: caption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleUpload,\n            children: \"Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 12\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ImageUpload, \"JJMEdQDssnjWBbpdwmd+TzfSu74=\");\n\n_c = ImageUpload;\nexport default ImageUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageUpload\");","map":{"version":3,"sources":["/Users/okienayonoadu/beej copy 2/src/ImageUpload.js"],"names":["React","useState","firebase","storage","db","ImageUpload","username","caption","setCaption","image","setImage","progress","setProgress","handleChange","e","target","files","handleUpload","uploadTask","ref","name","put","on","snapshot","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","getDownloadURL","then","url","collection","add","timestamp","firestore","FieldValue","serverTimestamp","imageUrl","open","setOpen","modalStyle","classes","paper","logo","event","value"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B,C,CACA;;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAAQC,OAAR,EAAiBC,EAAjB,QAA0B,YAA1B;AACA,OAAO,mBAAP;;AAEA,SAASC,WAAT,CAAqB;AAACC,EAAAA;AAAD,CAArB,EAAiC;AAAA;;AAC7B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC,CAF6B,CAEa;;AAC1C,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,CAAD,CAAxC;;AAIA,QAAMY,YAAY,GAAKC,CAAD,IAAO;AAAC;AAC1B,QAAIA,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAAJ,EAAuB;AAAE;AACrBN,MAAAA,QAAQ,CAACI,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAAD,CAAR,CADmB,CACU;AAChC;AACJ,GAJD;;AAMA,QAAMC,YAAY,GAAG,MAAM;AACvB;AACA,UAAMC,UAAU,GAAGf,OAAO,CAACgB,GAAR,CAAa,UAASV,KAAK,CAACW,IAAK,EAAjC,EAAoCC,GAApC,CAAwCZ,KAAxC,CAAnB;AAEAS,IAAAA,UAAU,CAACI,EAAX,CACI,eADJ;AAEI;AACCC,IAAAA,QAAD,IAAc;AACV;AACA,YAAMZ,QAAQ,GAAGa,IAAI,CAACC,KAAL,CACZF,QAAQ,CAACG,gBAAT,GAA4BH,QAAQ,CAACI,UAAtC,GAAoD,GADvC,CAAjB;AAGAf,MAAAA,WAAW,CAACD,QAAD,CAAX;AACH,KATL,EAUKiB,KAAD,IAAW;AACP;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAG,MAAAA,KAAK,CAACH,KAAK,CAACI,OAAP,CAAL;AACH,KAdL,EAeI,MAAM;AACF;AACA7B,MAAAA,OAAO,CACFgB,GADL,CACS,QADT,EAEKc,KAFL,CAEWxB,KAAK,CAACW,IAFjB,EAGKc,cAHL,GAGwB;AAHxB,OAIKC,IAJL,CAIUC,GAAG,IAAI;AACT;AACAhC,QAAAA,EAAE,CAACiC,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2B;AACvB;AACAC,UAAAA,SAAS,EAAErC,QAAQ,CAACsC,SAAT,CAAmBC,UAAnB,CAA8BC,eAA9B,EAFY;AAGvBnC,UAAAA,OAAO,EAAEA,OAHc;AAIvBoC,UAAAA,QAAQ,EAAEP,GAJa;AAKvB9B,UAAAA,QAAQ,EAAEA;AALa,SAA3B;AAQAM,QAAAA,WAAW,CAAC,CAAD,CAAX,CAVS,CAUO;;AAChBJ,QAAAA,UAAU,CAAC,EAAD,CAAV;AACAE,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,OAjBL;AAkBH,KAnCL;AAqCH,GAzCD;;AA2CA,sBAII,QAAC,KAAD,CAAO;AAAP;AACA,IAAA,IAAI,EAAIkC,IADR,CACc;AADd;AAEA,IAAA,OAAO,EAAE,MAAMC,OAAO,CAAC,KAAD,CAFtB,CAE+B;AAF/B;AAAA,2BAIA;AAAK,MAAA,KAAK,EAAEC,UAAZ;AAAwB,MAAA,SAAS,EAAEC,OAAO,CAACC,KAA3C;AAAA,6BACE;AAAM,QAAA,SAAS,EAAE,aAAjB;AAAA,gCACE;AAAA,iCACE;AACE,YAAA,SAAS,EAAC,kBADZ;AAEE,YAAA,GAAG,EAAEC,IAFP;AAGE,YAAA,GAAG,EAAC,EAHN;AAIE,YAAA,KAAK,EAAC,MAJR;AAKE,YAAA,MAAM,EAAC;AALT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAWE;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,kCACJ;AAAU,YAAA,SAAS,EAAC,uBAApB;AAA4C,YAAA,KAAK,EAAEtC,QAAnD;AAA6D,YAAA,GAAG,EAAC;AAAjE;AAAA;AAAA;AAAA;AAAA,kBADI,eAED;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,WAAW,EAAC,oBAA/B;AAAoD,YAAA,QAAQ,EAAEuC,KAAK,IAAI1C,UAAU,CAAC0C,KAAK,CAACnC,MAAN,CAAaoC,KAAd,CAAjF;AAAuG,YAAA,KAAK,EAAE5C;AAA9G;AAAA;AAAA;AAAA;AAAA,kBAFC,eAGD;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,QAAQ,EAAEM;AAA7B;AAAA;AAAA;AAAA;AAAA,kBAHC,eAID;AAAQ,YAAA,OAAO,EAAEI,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA,UAJJ;AA+BH;;GAvFQZ,W;;KAAAA,W;AAyFT,eAAeA,WAAf","sourcesContent":["import React, {useState} from 'react';\n//import {Button} from '@material-ui/core';\nimport firebase from \"firebase\";\nimport {storage, db} from './firebase';\nimport './ImageUpload.css';\n\nfunction ImageUpload({username}) {\n    const [caption, setCaption] = useState('');\n    const [image, setImage] = useState(null); //state for the progress bar\n    const [progress, setProgress] = useState(0);\n   \n    \n\n    const handleChange =  (e) => {//handleChange function fires off an event\n        if (e.target.files[0]) { //get the first file you selected\n            setImage(e.target.files[0]); //set the image in state to that file\n        }\n    };\n\n    const handleUpload = () => {\n        //access the storage in firebase, get a references to the folder images/ and store image there\n        const uploadTask = storage.ref(`images/${image.name}`).put(image);\n\n        uploadTask.on(\n            \"state_changed\",\n            /*provide snapshot of the image uploading progress via an equation*/\n            (snapshot) => {\n                //progress function ...\n                const progress = Math.round(\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n                );\n                setProgress(progress);\n            },\n            (error) => {\n                //error function ..\n                console.log(error);\n                alert(error.message);\n            },\n            () => {\n                // complete function ...\n                storage\n                    .ref(\"images\")\n                    .child(image.name)\n                    .getDownloadURL()   //GET DOWNLOAD LINK TO THE IMAGE\n                    .then(url => {\n                        //post image inside db\n                        db.collection(\"posts\").add({\n                            //get server timestamp so images are sorted by time posted\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                            caption: caption,\n                            imageUrl: url,\n                            username: username\n                        });\n\n                        setProgress(0); //reset progress\n                        setCaption(\"\");\n                        setImage(null);\n                    });\n            }\n        );\n    };\n\n    return (\n        \n        \n        \n        <Modal //Sign up Modal\n        open = {open} //state to keep track if its open\n        onClose={() => setOpen(false)} //onClose method. closes the model when anywhere else on the screen is clicked\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className= \"app__signup\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src={logo}\n                alt=\"\"\n                width=\"50px\"\n                height=\"50px\"\n              />\n            </center>\n            \n            <div className=\"imageupload\">\n        <progress className=\"imageupload__progress\" value={progress} max=\"100\"/>\n           <input type=\"text\" placeholder='Enter a caption...' onChange={event => setCaption(event.target.value)} value={caption}/>\n           <input type=\"file\" onChange={handleChange} />\n           <button onClick={handleUpload}>Upload</button>\n            </div>\n              \n          </form>\n        </div>\n      </Modal>      \n    )\n}\n\nexport default ImageUpload"]},"metadata":{},"sourceType":"module"}