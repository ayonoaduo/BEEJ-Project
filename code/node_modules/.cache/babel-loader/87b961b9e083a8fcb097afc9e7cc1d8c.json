{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/okienayonoadu/beej copy 2/src/Post.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { db } from './firebase';\nimport './Post.css';\nimport Avatar from \"@material-ui/core/Avatar\";\nimport firebase from 'firebase';\n\nfunction Post({\n  postId,\n  user,\n  username,\n  caption,\n  keyword,\n  imageUrl\n}) {\n  _s();\n\n  const [comments, setComments] = useState([]); //keep track of the comments\n\n  const [comment, setComment] = useState('');\n  useEffect(() => {\n    let unsubscribe;\n\n    if (postId) //if a post id was passed true\n      {\n        unsubscribe = db.collection(\"posts\") //access the post collection\n        .doc(postId).collection(\"comments\").orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n          // get a snapshot listener for that comment\n          setComments(snapshot.docs.map(doc => doc.data()));\n        });\n      }\n\n    return () => {\n      unsubscribe();\n    };\n  }, [postId]); //function that submits comment into database for a specific post\n\n  const postComment = event => {\n    event.preventDefault();\n    db.collection(\"posts\").doc(postId).collection(\"comments\").add({\n      text: comment,\n      username: user.displayName,\n      //get the user who signed in from app.js\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    });\n    setComment(''); //clears the box\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post__header\",\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        className: \"post__avatar\",\n        alt: username\n        /*display the first letter if no picture*/\n        ,\n        src: \"/static/images/avatar/1.jpg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"post__image\",\n      src: imageUrl,\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"post__text\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 36\n      }, this), \" \", caption]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"post__text\",\n      children: [keyword, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post__comments\",\n      children: comments.map(comment =>\n      /*#__PURE__*/\n      //map through each comment\n      _jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: comment.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 12\n        }, this), \" \", comment.text]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }, this), (user === null || user === void 0 ? void 0 : user.displayName) ?\n    /*#__PURE__*/\n    //comment box only shows if you are logged in\n    _jsxDEV(\"form\", {\n      className: \"post__commentBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"post__input\",\n        type: \"text\",\n        placeholder: \"Add a comment...\",\n        value: comment,\n        onChange: e => setComment(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !comment //disable if there is no comment\n        ,\n        className: \"post__button\",\n        type: \"submit\",\n        onClick: postComment,\n        children: \" Post \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Sorry you need to login to comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Post, \"vDMNQUtDpjPqquTzbqtVZcuIh7s=\");\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/okienayonoadu/beej copy 2/src/Post.js"],"names":["React","useState","useEffect","db","Avatar","firebase","Post","postId","user","username","caption","keyword","imageUrl","comments","setComments","comment","setComment","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","postComment","event","preventDefault","add","text","displayName","timestamp","firestore","FieldValue","serverTimestamp","e","target","value"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport { db } from './firebase';\nimport './Post.css';\nimport Avatar from \"@material-ui/core/Avatar\";\nimport firebase from 'firebase';\n\nfunction Post({postId, user, username, caption, keyword, imageUrl}) {\n  const [comments, setComments] = useState([]); //keep track of the comments\n  const [comment, setComment] = useState('');\n  useEffect(()=>{\n    let unsubscribe;\n    if (postId) //if a post id was passed true\n    {\n      unsubscribe = db\n      .collection(\"posts\") //access the post collection\n      .doc(postId)\n      .collection(\"comments\")\n      .orderBy('timestamp', 'desc')\n      .onSnapshot((snapshot) => { // get a snapshot listener for that comment\n\t\tsetComments(snapshot.docs.map((doc) => doc.data())); \n      });\n  }\n\n  return () => {\n    unsubscribe();\n  };\n  },\n  [postId]);\n\n  //function that submits comment into database for a specific post\n  const postComment = (event) => {\n    event.preventDefault();\n\n    db.collection(\"posts\").doc(postId).collection(\"comments\").add({\n      text: comment,\n      username: user.displayName,  //get the user who signed in from app.js\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    });\n    setComment(''); //clears the box\n  }\n\n\n    return (\n      <div className=\"post\">\n\n        {/*header -> avatar + username */}\n        <div className=\"post__header\">\n        <Avatar\n            className=\"post__avatar\"\n            alt={username} /*display the first letter if no picture*/\n            src=\"/static/images/avatar/1.jpg\"\n            />\n        <h3>{username}</h3>\n        </div>\n\n        {/*image*/}\n        <img className=\"post__image\" src={imageUrl} alt=\"\"></img>\n          \n        {/* username + caption */}\n        <h4 className=\"post__text\"><strong>{username}</strong> {caption}</h4>\n        \n        {/* keyword */}\n        <h4 className=\"post__text\">{keyword} </h4>\n        \n        \n          <div className=\"post__comments\"> \n          {comments.map((comment) => (//map through each comment\n          <p>\n           <strong>{comment.username}</strong> {comment.text}\n          </p>\n          ))}\n        </div>\n\n\n        {user?.displayName? ( //comment box only shows if you are logged in\n      <form className=\"post__commentBox\"> \n      <input\n          className=\"post__input\"\n          type=\"text\"\n          placeholder=\"Add a comment...\"\n          value={comment}\n          onChange={(e) => setComment(e.target.value)}\n      />\n      <button\n        disabled={!comment} //disable if there is no comment\n        className=\"post__button\"\n        type=\"submit\"\n        onClick={postComment}\n        > Post </button>\n    </form>\n        ):\n        (\n          <h3>Sorry you need to login to comment</h3>\n      )\n        }\n\n      \n      </div>\n    )\n}\n\nexport default Post\n"]},"metadata":{},"sourceType":"module"}