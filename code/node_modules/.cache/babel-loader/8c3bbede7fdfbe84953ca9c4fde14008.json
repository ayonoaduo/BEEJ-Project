{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _slicedToArray from\"/Users/okienayonoadu/beej copy 2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{db}from'./firebase';import'./Post.css';import Avatar from\"@material-ui/core/Avatar\";import firebase from'firebase';import{UserContext,useContext}from'react';function Post(_ref){var postId=_ref.postId,uid=_ref.uid,user=_ref.user,username=_ref.username,caption=_ref.caption,keyword=_ref.keyword,imageUrl=_ref.imageUrl;// const currentUser = useContext(UserContext);\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),comments=_useState2[0],setComments=_useState2[1];//keep track of the comments\nvar _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),comment=_useState4[0],setComment=_useState4[1];useEffect(function(){var unsubscribe;if(postId)//if a post id was passed true\n{unsubscribe=db.collection(\"posts\")//access the post collection\n.doc(postId).collection(\"comments\").orderBy('timestamp','desc').onSnapshot(function(snapshot){// get a snapshot listener for that comment\nsetComments(snapshot.docs.map(function(doc){return doc.data();}));});}}/*       db.collection(\"posts\")\n      .where(\"username\", \"=\", currentUser.username)\n    .get()\n    .then(function(querySnapshot) {\n        querySnapshot.forEach(function(doc) {\n            // doc.data() is never undefined for query doc snapshots\n            console.log(doc.id, \" => \", doc.data());\n        });\n    })\n    .catch(function(error) {\n        console.log(\"Error getting documents: \", error);\n    }); */ // return () => {\n//   unsubscribe();\n// };\n// },\n// [postId]\n);//function that submits comment into database for a specific post\nvar postComment=function postComment(event){event.preventDefault();db.collection(\"posts\").doc(postId).collection(\"comments\").add({text:comment,username:user.displayName,//get the user who signed in from app.js\ntimestamp:firebase.firestore.FieldValue.serverTimestamp()});setComment('');//clears the box\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"post\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"post__header\",children:[/*#__PURE__*/_jsx(Avatar,{className:\"post__avatar\",alt:username/*display the first letter if no picture*/,src:\"/static/images/avatar/1.jpg\"}),/*#__PURE__*/_jsx(\"h3\",{children:username})]}),/*#__PURE__*/_jsx(\"img\",{className:\"post__image\",src:imageUrl,alt:\"\"}),/*#__PURE__*/_jsxs(\"h4\",{className:\"post__text\",children:[/*#__PURE__*/_jsx(\"strong\",{children:username}),\" \",caption]}),/*#__PURE__*/_jsxs(\"h4\",{className:\"post__text\",children:[keyword,\" \"]}),/*#__PURE__*/_jsx(\"div\",{className:\"post__comments\",children:comments.map(function(comment){return/*#__PURE__*/ (//map through each comment\n_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:comment.username}),\" \",comment.text]}));})}),(user===null||user===void 0?void 0:user.displayName)?/*#__PURE__*/ //comment box only shows if you are logged in\n_jsxs(\"form\",{className:\"post__commentBox\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"post__input\",type:\"text\",placeholder:\"Add a comment...\",value:comment,onChange:function onChange(e){return setComment(e.target.value);}}),/*#__PURE__*/_jsx(\"button\",{disabled:!comment//disable if there is no comment\n,className:\"post__button\",type:\"submit\",onClick:postComment,children:\" Post \"})]}):/*#__PURE__*/_jsx(\"h3\",{children:\"Sorry you need to login to comment\"})]});}export default Post;","map":{"version":3,"sources":["/Users/okienayonoadu/beej copy 2/src/Post.js"],"names":["React","useState","useEffect","db","Avatar","firebase","UserContext","useContext","Post","postId","uid","user","username","caption","keyword","imageUrl","comments","setComments","comment","setComment","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","postComment","event","preventDefault","add","text","displayName","timestamp","firestore","FieldValue","serverTimestamp","e","target","value"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport { db } from './firebase';\nimport './Post.css';\nimport Avatar from \"@material-ui/core/Avatar\";\nimport firebase from 'firebase';\nimport { UserContext , useContext} from 'react';\n\nfunction Post({postId, uid, user, username, caption, keyword, imageUrl}) {\n\n // const currentUser = useContext(UserContext);\n  const [comments, setComments] = useState([]); //keep track of the comments\n  const [comment, setComment] = useState('');\n  useEffect(()=>{\n    let unsubscribe;\n    if (postId) //if a post id was passed true\n    {\n      unsubscribe = db\n      .collection(\"posts\") //access the post collection\n      .doc(postId)\n      .collection(\"comments\")\n      .orderBy('timestamp', 'desc')\n      .onSnapshot((snapshot) => { // get a snapshot listener for that comment\n\t\t    setComments(snapshot.docs.map((doc) => doc.data())); \n      });}}\n\n\n/*       db.collection(\"posts\")\n      .where(\"username\", \"=\", currentUser.username)\n    .get()\n    .then(function(querySnapshot) {\n        querySnapshot.forEach(function(doc) {\n            // doc.data() is never undefined for query doc snapshots\n            console.log(doc.id, \" => \", doc.data());\n        });\n    })\n    .catch(function(error) {\n        console.log(\"Error getting documents: \", error);\n    }); */\n  \n\n  // return () => {\n  //   unsubscribe();\n  // };\n  // },\n  // [postId]\n  );\n\n  //function that submits comment into database for a specific post\n  const postComment = (event) => {\n    event.preventDefault();\n\n    db.collection(\"posts\").doc(postId).collection(\"comments\").add({\n      text: comment,\n      username: user.displayName,  //get the user who signed in from app.js\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    });\n    setComment(''); //clears the box\n  }\n\n\n    return (\n      <div className=\"post\">\n\n        {/*header -> avatar + username */}\n        <div className=\"post__header\">\n        <Avatar\n            className=\"post__avatar\"\n            alt={username} /*display the first letter if no picture*/\n            src=\"/static/images/avatar/1.jpg\"\n            />\n        <h3>{username}</h3>\n        </div>\n\n        {/*image*/}\n        <img className=\"post__image\" src={imageUrl} alt=\"\"></img>\n          \n        {/* username + caption */}\n        <h4 className=\"post__text\"><strong>{username}</strong> {caption}</h4>\n{/*         \n        keyword */}\n        <h4 className=\"post__text\">{keyword} </h4>\n        \n        \n          <div className=\"post__comments\"> \n          {comments.map((comment) => (//map through each comment\n          <p>\n           <strong>{comment.username}</strong> {comment.text}\n          </p>\n          ))}\n        </div>\n\n\n        {user?.displayName? ( //comment box only shows if you are logged in\n      <form className=\"post__commentBox\"> \n      <input\n          className=\"post__input\"\n          type=\"text\"\n          placeholder=\"Add a comment...\"\n          value={comment}\n          onChange={(e) => setComment(e.target.value)}\n      />\n      <button\n        disabled={!comment} //disable if there is no comment\n        className=\"post__button\"\n        type=\"submit\"\n        onClick={postComment}\n        > Post </button>\n    </form>\n        ):\n        (\n          <h3>Sorry you need to login to comment</h3>\n      )\n        }    \n      </div>\n    )\n}\n\nexport default Post\n"]},"metadata":{},"sourceType":"module"}