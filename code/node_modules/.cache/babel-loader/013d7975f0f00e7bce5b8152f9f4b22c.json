{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/okienayonoadu/beej copy 2/src/Post.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { db } from './firebase';\nimport './Post.css';\nimport Avatar from \"@material-ui/core/Avatar\";\nimport firebase from 'firebase';\nimport { UserContext, useContext } from 'react';\n\nfunction Post({\n  postId,\n  uid,\n  user,\n  username,\n  caption,\n  keyword,\n  imageUrl\n}) {\n  _s();\n\n  const currentUser = useContext(UserContext);\n  const [comments, setComments] = useState([]); //keep track of the comments\n\n  const [comment, setComment] = useState('');\n  useEffect(() => {\n    // let unsubscribe;\n    // if (postId) //if a post id was passed true\n    // {\n    //   unsubscribe = db\n    //   .collection(\"posts\").where() //access the post collection\n    //   .doc(postId)\n    //   .collection(\"comments\")\n    //   .orderBy('timestamp', 'desc')\n    //   .onSnapshot((snapshot) => { // get a snapshot listener for that comment\n    //     setComments(snapshot.docs.map((doc) => doc.data())); \n    //   });\n    db.collection(\"posts\").where(\"username\", \"=\", currentUser.username).get().then(function (querySnapshot) {\n      querySnapshot.forEach(function (doc) {\n        // doc.data() is never undefined for query doc snapshots\n        console.log(doc.id, \" => \", doc.data());\n      });\n    }).catch(function (error) {\n      console.log(\"Error getting documents: \", error);\n    });\n  } // return () => {\n  //   unsubscribe();\n  // };\n  // },\n  // [postId]\n  ); //function that submits comment into database for a specific post\n\n  const postComment = event => {\n    event.preventDefault();\n    db.collection(\"posts\").doc(postId).collection(\"comments\").add({\n      text: comment,\n      username: user.displayName,\n      //get the user who signed in from app.js\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    });\n    setComment(''); //clears the box\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post__header\",\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        className: \"post__avatar\",\n        alt: username\n        /*display the first letter if no picture*/\n        ,\n        src: \"/static/images/avatar/1.jpg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"post__image\",\n      src: imageUrl,\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"post__text\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 36\n      }, this), \" \", caption]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"post__text\",\n      children: [keyword, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post__comments\",\n      children: comments.map(comment =>\n      /*#__PURE__*/\n      //map through each comment\n      _jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: comment.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 12\n        }, this), \" \", comment.text]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }, this), (user === null || user === void 0 ? void 0 : user.displayName) ?\n    /*#__PURE__*/\n    //comment box only shows if you are logged in\n    _jsxDEV(\"form\", {\n      className: \"post__commentBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"post__input\",\n        type: \"text\",\n        placeholder: \"Add a comment...\",\n        value: comment,\n        onChange: e => setComment(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !comment //disable if there is no comment\n        ,\n        className: \"post__button\",\n        type: \"submit\",\n        onClick: postComment,\n        children: \" Post \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Sorry you need to login to comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Post, \"p4npIKpcbmi9+ohjkh49yQGFGKI=\");\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/okienayonoadu/beej copy 2/src/Post.js"],"names":["React","useState","useEffect","db","Avatar","firebase","UserContext","useContext","Post","postId","uid","user","username","caption","keyword","imageUrl","currentUser","comments","setComments","comment","setComment","collection","where","get","then","querySnapshot","forEach","doc","console","log","id","data","catch","error","postComment","event","preventDefault","add","text","displayName","timestamp","firestore","FieldValue","serverTimestamp","map","e","target","value"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport { db } from './firebase';\nimport './Post.css';\nimport Avatar from \"@material-ui/core/Avatar\";\nimport firebase from 'firebase';\nimport { UserContext , useContext} from 'react';\n\nfunction Post({postId, uid, user, username, caption, keyword, imageUrl}) {\n\n  const currentUser = useContext(UserContext);\n  const [comments, setComments] = useState([]); //keep track of the comments\n  const [comment, setComment] = useState('');\n  useEffect(()=>{\n    // let unsubscribe;\n    // if (postId) //if a post id was passed true\n    // {\n    //   unsubscribe = db\n    //   .collection(\"posts\").where() //access the post collection\n    //   .doc(postId)\n    //   .collection(\"comments\")\n    //   .orderBy('timestamp', 'desc')\n    //   .onSnapshot((snapshot) => { // get a snapshot listener for that comment\n\t\t//     setComments(snapshot.docs.map((doc) => doc.data())); \n    //   });\n\n\n      db.collection(\"posts\")\n      .where(\"username\", \"=\", currentUser.username)\n    .get()\n    .then(function(querySnapshot) {\n        querySnapshot.forEach(function(doc) {\n            // doc.data() is never undefined for query doc snapshots\n            console.log(doc.id, \" => \", doc.data());\n        });\n    })\n    .catch(function(error) {\n        console.log(\"Error getting documents: \", error);\n    });\n  }\n\n  // return () => {\n  //   unsubscribe();\n  // };\n  // },\n  // [postId]\n  );\n\n  //function that submits comment into database for a specific post\n  const postComment = (event) => {\n    event.preventDefault();\n\n    db.collection(\"posts\").doc(postId).collection(\"comments\").add({\n      text: comment,\n      username: user.displayName,  //get the user who signed in from app.js\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    });\n    setComment(''); //clears the box\n  }\n\n\n    return (\n      <div className=\"post\">\n\n        {/*header -> avatar + username */}\n        <div className=\"post__header\">\n        <Avatar\n            className=\"post__avatar\"\n            alt={username} /*display the first letter if no picture*/\n            src=\"/static/images/avatar/1.jpg\"\n            />\n        <h3>{username}</h3>\n        </div>\n\n        {/*image*/}\n        <img className=\"post__image\" src={imageUrl} alt=\"\"></img>\n          \n        {/* username + caption */}\n        <h4 className=\"post__text\"><strong>{username}</strong> {caption}</h4>\n{/*         \n        keyword */}\n        <h4 className=\"post__text\">{keyword} </h4>\n        \n        \n          <div className=\"post__comments\"> \n          {comments.map((comment) => (//map through each comment\n          <p>\n           <strong>{comment.username}</strong> {comment.text}\n          </p>\n          ))}\n        </div>\n\n\n        {user?.displayName? ( //comment box only shows if you are logged in\n      <form className=\"post__commentBox\"> \n      <input\n          className=\"post__input\"\n          type=\"text\"\n          placeholder=\"Add a comment...\"\n          value={comment}\n          onChange={(e) => setComment(e.target.value)}\n      />\n      <button\n        disabled={!comment} //disable if there is no comment\n        className=\"post__button\"\n        type=\"submit\"\n        onClick={postComment}\n        > Post </button>\n    </form>\n        ):\n        (\n          <h3>Sorry you need to login to comment</h3>\n      )\n        }    \n      </div>\n    )\n}\n\nexport default Post\n"]},"metadata":{},"sourceType":"module"}