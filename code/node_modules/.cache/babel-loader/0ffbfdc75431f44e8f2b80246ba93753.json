{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/okienayonoadu/beej copy 2/src/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './Home.css';\nimport './ImageUpload.css';\nimport logo from './beej.png';\nimport Post from './Post'; //import RecoverAccount from './RecoverAccount';\n\nimport { db, auth } from './firebase';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal'; //import {Button} from '@material-ui/core';\n\nimport { Input } from '@material-ui/core';\nimport ImageUpload from './ImageUpload'; //import VerifyEmail from './VerifyEmail';\n\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\nimport EmailOutlinedIcon from '@material-ui/icons/EmailOutlined';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport HomeOutlinedIcon from '@material-ui/icons/HomeOutlined';\nimport AddBoxOutlinedIcon from '@material-ui/icons/AddBoxOutlined';\nimport NotificationsNoneOutlinedIcon from '@material-ui/icons/NotificationsNoneOutlined';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport { Link, withRouter } from 'react-router-dom';\nimport firebase from \"firebase\";\nimport { storage } from './firebase';\nimport './ImageUpload.css';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\n/*Styling for modal. Code from material-ui.com*/\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3)\n  },\n  button: {\n    display: 'block',\n    marginTop: theme.spacing(2)\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  }\n}));\nexport default function ControlledOpenSelect() {\n  _s();\n\n  const classes = useStyles();\n  const [age, setAge] = React.useState('');\n  const [open, setOpen] = React.useState(false);\n\n  const handleChange = event => {\n    setAge(event.target.value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(FormControl, {\n      className: classes.formControl,\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        id: \"demo-controlled-open-select-label\",\n        children: \"Age\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        labelId: \"demo-controlled-open-select-label\",\n        id: \"demo-controlled-open-select\",\n        open: open,\n        onClose: handleClose,\n        onOpen: handleOpen,\n        value: age,\n        onChange: handleChange,\n        children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"\",\n          children: /*#__PURE__*/_jsxDEV(\"em\", {\n            children: \"None\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: 10,\n          children: \"Ten\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: 20,\n          children: \"Twenty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: 30,\n          children: \"Thirty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n} // function Home() {\n// /*states...how you set variables in react*/\n// const classes = useStyles();\n// // getModalStyle is not a pure function, we roll the style only on the first render\n// const [modalStyle] = useState(getModalStyle);\n// const [posts, setPosts] = useState([]);\n// const [open,setOpen] = useState(false);\n// const [openSignIn, setOpenSignIn] = useState(false);\n// const [username,setUsername] = useState('');\n// const [password,setPassword] = useState('');\n// const [email,setEmail] = useState('');\n// const [user,setUser] = useState(null); //state to keep track of the user\n// //IMAGE UPLOAD STATES\n// const [openP,setOpenP] = useState(false);\n// const [caption, setCaption] = useState('');\n// const [keyword, setKeyword] = useState('');\n// const [image, setImage] = useState(null); //state for the progress bar\n// const [progress, setProgress] = useState(0);\n//   const [age, setAge] = React.useState('');\n//   const [open1, setOpen1] = React.useState(false);\n//   const handleChange1 = (event) => {\n//     setAge(event.target.value);\n//   };\n//   const handleClose = () => {\n//     setOpen1(false);\n//   };\n//   const handleOpen1 = () => {\n//     setOpen1(true);\n//   };\n// //imageupload functions\n// const handleChange =  (e) => {//handleChange function fires off an event\n//   if (e.target.files[0]) { //get the first file you selected\n//       setImage(e.target.files[0]); //set the image in state to that file\n//   }\n// };\n// const handleUpload = (event) => {\n//   event.preventDefault(); //avoid refresh when upload button is clicked\n//   //access the storage in firebase, get a references to the folder images/ and store image there\n//   const uploadTask = storage.ref(`images/${image.name}`).put(image);\n//   uploadTask.on(\n//       \"state_changed\",\n//       /*provide snapshot of the image uploading progress via an equation*/\n//       (snapshot) => {\n//           //progress function ...\n//           const progress = Math.round(\n//               (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n//           );\n//           setProgress(progress);\n//       },\n//       (error) => {\n//           //error function ..\n//           console.log(error);\n//           alert(error.message);\n//       },\n//       () => {\n//           // complete function ...\n//           storage\n//               .ref(\"images\")\n//               .child(image.name)\n//               .getDownloadURL()   //GET DOWNLOAD LINK TO THE IMAGE\n//               .then(url => {\n//                   //post image inside db\n//                   db.collection(\"posts\").add({\n//                       //get server timestamp so images are sorted by time posted\n//                       timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n//                       caption: caption,\n//                       imageUrl: url,\n//                       keyword: keyword,\n//                       username: user.displayName\n//                   });\n//                   setProgress(0); //reset progress\n//                   setCaption(\"\");\n//                   setImage(null);\n//               });\n//       }\n//   );\n//   setOpenP(false); //close modal after upload\n// };\n// useEffect(() => {\n//     const unsubscribe = auth.onAuthStateChanged((authUser) => { //listen anytime an authentication change happens\n//       if (authUser) {\n//         //user has logged in...\n//         console.log(authUser);  //check the console if someone is there or not\n//         setUser(authUser); //Cookie tracking to keep you logged in. Captures the user in our state. \n//         if (authUser.displayName) {\n//           //dont update username if they dont have a display name\n//         } else {\n//           // if we just created someone...\n//           return authUser.updateProfile({\n//             displayName: username, //set their display name in firebase\n//         });\n//         }\n//       } else {\n//         // user has logged out...\n//         setUser(null);\n//       }\n//     })\n//     return () => {\n//       //perform some cleanup actions before restarting the useEffect. This to avoid duplicate listeners.\n//       unsubscribe ();\n//     }\n// }, [user, username]);\n// //useEffect runs a piece of code based on a specific condition\n// useEffect(() => {\n//   //this is where the code runs\n//   //snapshot is a powerful listener that will run the code when a post is made\n//   db.collection('posts').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n//     //everytime a new post is added, this code fires...\n//     setPosts(snapshot.docs.map(doc => ({\n//       id: doc.id, //the post ids\n//       post: doc.data()\n//     })));\n//   })\n// }, []);//[] symbol means run the code once\n// //sign up function. Fired up by the button\n// const signUp = (event) => {\n//   event.preventDefault(); //avoid refresh when sign up button is clicked\n//   //verify email\n//   auth.onAuthStateChanged(function (firebaseUser) {\n//     if (firebaseUser) {\n//       firebaseUser.sendEmailVerification().then(function() {\n//         // Email sent.\n//         //alert(\"Your email verification code has been sent\")\n//       }, function(error) {\n//         // An error happened.\n//        alert(error.message)\n//       })\n//     } else {\n//     }\n// });\n// auth\n//     .createUserWithEmailAndPassword(email, password)  //create user\n//     .then((authUser) => {\n//     return authUser.user.updateProfile({\n//     displayName: username\n//     })  \n//   }\n//   )\n//   //backend validation is done by firebase\n//   .catch((error) => alert(error.message)) //alert of any errors with a message\n//   setOpen(false); //close modal after signing up\n// }\n// //sign in function. Fired up by the button\n// const signIn = (event) => {\n//   event.preventDefault(); //avoid refresh when sign in button is clicked\n//   auth\n//   .signInWithEmailAndPassword(email, password)\n//   //backend validation is done by firebase\n//   .catch((error) => alert(error.message)) //alert of any errors with a message\n//   setOpenSignIn(false); //close modal after signing in\n// }\n//   return (\n//     <div className=\"app\">\n//       {/*using BEM naming convetion*/}\n//       {user?.displayName ?(//access only when user is signed in\n//         <ImageUpload username={user.displayName} />\n//       ):\n//       (\n//           <h7>Sorry you need to login to upload</h7>\n//       )}\n//       <Modal //Sign up Modal\n//         open = {open} //state to keep track if its open\n//         onClose={() => setOpen(false)} //onClose method. closes the model when anywhere else on the screen is clicked\n//       >\n//         <div style={modalStyle} className={classes.paper}>\n//           <form className= \"app__signup\">\n//             <center>\n//               <img\n//                 className=\"app__headerImage\"\n//                 src={logo}\n//                 alt=\"\"\n//                 width=\"50px\"\n//                 height=\"50px\"\n//               />\n//             </center>\n//             <AccountCircleOutlinedIcon/>\n//             <Input \n//                 placeholder = \"username\"\n//                 type=\"text\"\n//                 value={username}\n//                 onChange={(e) => setUsername(e.target.value)}\n//               />\n//               <EmailOutlinedIcon/>\n//               <Input \n//                 placeholder = \"email\"\n//                 type=\"text\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//               />\n//               <LockOutlinedIcon/>\n//               <Input \n//                 placeholder = \"password\"\n//                 type=\"password\"\n//                 value={password}\n//                 onChange={(e) => setPassword(e.target.value)}\n//               />\n//               <button type=\"submit\" onClick={signUp}>Sign Up</button>\n//           </form>\n//         </div>\n//       </Modal>\n//       <Modal //Sign Out and Login Modal\n//         open = {openSignIn} //state to keep track if its open\n//         onClose={() => setOpenSignIn(false)} //onClose method. closes the model when anywhere else on the screen is clicked\n//       >\n//         <div style={modalStyle} className={classes.paper}>\n//           <form className= \"app__signup\">\n//             <center>\n//               <img\n//                 className=\"app__headerImage\"\n//                 src={logo}\n//                 alt=\"\"\n//                 width=\"50px\"\n//                 height=\"50px\"\n//               />\n//             </center>\n//             <EmailOutlinedIcon/>\n//               <Input \n//                 placeholder = \"email\"\n//                 type=\"text\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//               />\n//               <LockOutlinedIcon/>\n//               <Input \n//                 placeholder = \"password\"\n//                 type=\"password\"\n//                 value={password}\n//                 onChange={(e) => setPassword(e.target.value)}\n//               />\n//               <button type=\"submit\" onClick={signIn}>Sign In</button>\n//           </form>\n//         </div>\n//       </Modal>\n//       <div>\n//     </div>\n// {/* modal for posting*/}\n// <Modal \n//         open = {openP} //state to keep track if its open\n//         onClose={() => setOpenP(false)} //onClose method. closes the model when anywhere else on the screen is clicked\n//       >\n//         <div style={modalStyle} className={classes.paper}>\n//         <div className=\"imageupload\">\n//          <form className= \"app__signup\">\n//               <progress className=\"imageupload__progress\" value={progress} max=\"100\"/>\n//             <input type=\"text\" placeholder='Enter a caption...' onChange={event => setCaption(event.target.value)} value={caption}/>\n//             <FormControl className={classes.formControl}>\n//         <InputLabel id=\"demo-controlled-open-select-label\">Age</InputLabel>\n//         <Select labelId=\"demo-controlled-open-select-label\" id=\"demo-controlled-open-select\" open={open} onClose={handleClose} onOpen={handleOpen1} value={age} onChange={handleChange1}>\n//           <MenuItem value=\"\">\n//             None\n//           </MenuItem>\n//           <MenuItem value={10}>Ten</MenuItem>\n//           <MenuItem value={20}>Twenty</MenuItem>\n//           <MenuItem value={30}>Thirty</MenuItem>\n//         </Select>\n//       </FormControl>\n//             <input type=\"file\" onChange={handleChange} />\n//             <button type=\"submit\" onClick={handleUpload}>\n//               Upload\n//             </button>\n//            </form>\n//         </div>\n//         </div>\n//       </Modal>\n//       <div className=\"app__header\">\n//         <img\n//           className=\"app__headerImage\"\n//           src={logo}\n//           alt=\"\"\n//           width=\"50px\"\n//           height=\"50px\"\n//         />\n//         {user?.displayName? ( //if the user exists, show a Logout button\n//         <button onClick={() => auth.signOut()}>Logout</button>\n//       ):  ( //else, show a sign up button\n//           <div className=\"app__loginContainer\">\n//         <button onClick={() => setOpenSignIn(true)}>Sign In</button>\n//         <button onClick={() => setOpen(true)}>Sign Up</button>\n//         </div>\n//       )}\n//         </div>\n//       <div className=\"app__posts\">\n//         <div className= \"app_postsRight\">\n//       {/*Posts*/}\n//       {\n//         /*loop through posts in state*/\n//         posts.map(({id, post}) => (\n//           //the key allows the page to only refresh the new post, not all the posts. since each post has its own key\n//           <Post key={id} postId={id} user= {user} username={post.username} caption={post.caption} imageUrl={post.imageUrl}></Post>\n//         ))\n//       }\n//       </div>\n//       </div>\n// {user?.displayName ?(//access only when user is signed in\n//       <div className=\"app__bottom\">\n//       <BottomNavigation>\n//   <BottomNavigationAction label=\"Home\" icon={<HomeOutlinedIcon />} component={Link} to=\"/\" />\n//   <BottomNavigationAction label=\"AddBox\" icon={<AddBoxOutlinedIcon />}onClick={() => setOpenP(true)}/>\n//   <BottomNavigationAction label=\"Notifications\" icon={<NotificationsNoneOutlinedIcon />}/>\n//   <BottomNavigationAction label=\"Account\" icon={<AccountCircleOutlinedIcon />} />\n// </BottomNavigation>\n// </div>\n//      ):\n//      (\n//         <h7></h7> //hide nav bar when user is not signed in\n//     )}\n//     </div>\n//   );\n// }\n// export default Home;\n\n_s(ControlledOpenSelect, \"kY2kimeFWj34UZ4+rj83gEaUHuI=\", false, function () {\n  return [useStyles];\n});\n\n_c = ControlledOpenSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"ControlledOpenSelect\");","map":{"version":3,"sources":["/Users/okienayonoadu/beej copy 2/src/Home.js"],"names":["React","useState","useEffect","logo","Post","db","auth","makeStyles","Modal","Input","ImageUpload","AccountCircleOutlinedIcon","EmailOutlinedIcon","LockOutlinedIcon","BottomNavigation","HomeOutlinedIcon","AddBoxOutlinedIcon","NotificationsNoneOutlinedIcon","BottomNavigationAction","Link","withRouter","firebase","storage","InputLabel","MenuItem","FormControl","Select","Button","getModalStyle","top","left","transform","useStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","button","display","marginTop","formControl","margin","minWidth","ControlledOpenSelect","classes","age","setAge","open","setOpen","handleChange","event","target","value","handleClose","handleOpen"],"mappings":"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AAK,EAAET,GANT;AAOE,QAAA,QAAQ,EAAEI,YAPZ;AAAA,gCASE,QAAC,QAAD;AAAU,UAAA,KAAK,EAAC,EAAhB;AAAA,iCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBATF,eAYE,QAAC,QAAD;AAAU,UAAA,KAAK,EAAE,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZF,eAaE,QAAC,QAAD;AAAU,UAAA,KAAK,EAAE,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF,eAcE,QAAC,QAAD;AAAU,UAAA,KAAK,EAAE,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,C,CAED;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;;GAhbwBN,oB;UACNnB,S;;;KADMmB,oB","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport './Home.css';\nimport './ImageUpload.css';\nimport logo from './beej.png';\nimport Post from './Post';\n//import RecoverAccount from './RecoverAccount';\nimport {db, auth} from './firebase';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\n//import {Button} from '@material-ui/core';\nimport {Input} from '@material-ui/core';\nimport ImageUpload from './ImageUpload';\n//import VerifyEmail from './VerifyEmail';\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\nimport EmailOutlinedIcon from '@material-ui/icons/EmailOutlined';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\n\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport HomeOutlinedIcon from '@material-ui/icons/HomeOutlined';\nimport AddBoxOutlinedIcon from '@material-ui/icons/AddBoxOutlined';\nimport NotificationsNoneOutlinedIcon from '@material-ui/icons/NotificationsNoneOutlined';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\n \nimport {Link, withRouter} from 'react-router-dom';\n\nimport firebase from \"firebase\";\nimport {storage} from './firebase';\nimport './ImageUpload.css';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\n\n\n/*Styling for modal. Code from material-ui.com*/\nfunction getModalStyle() {\n  const top = 50\n  const left = 50\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n  button: {\n    display: 'block',\n    marginTop: theme.spacing(2),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n}));\n\nexport default function ControlledOpenSelect() {\n  const classes = useStyles();\n  const [age, setAge] = React.useState('');\n  const [open, setOpen] = React.useState(false);\n\n  const handleChange = (event) => {\n    setAge(event.target.value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  return (\n    <div>\n      <FormControl className={classes.formControl}>\n        <InputLabel id=\"demo-controlled-open-select-label\">Age</InputLabel>\n        <Select\n          labelId=\"demo-controlled-open-select-label\"\n          id=\"demo-controlled-open-select\"\n          open={open}\n          onClose={handleClose}\n          onOpen={handleOpen}\n          value={age}\n          onChange={handleChange}\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          <MenuItem value={10}>Ten</MenuItem>\n          <MenuItem value={20}>Twenty</MenuItem>\n          <MenuItem value={30}>Thirty</MenuItem>\n        </Select>\n      </FormControl>\n    </div>\n  );\n}\n\n// function Home() {\n// /*states...how you set variables in react*/\n// const classes = useStyles();\n// // getModalStyle is not a pure function, we roll the style only on the first render\n// const [modalStyle] = useState(getModalStyle);\n\n// const [posts, setPosts] = useState([]);\n// const [open,setOpen] = useState(false);\n// const [openSignIn, setOpenSignIn] = useState(false);\n// const [username,setUsername] = useState('');\n// const [password,setPassword] = useState('');\n// const [email,setEmail] = useState('');\n// const [user,setUser] = useState(null); //state to keep track of the user\n\n\n// //IMAGE UPLOAD STATES\n// const [openP,setOpenP] = useState(false);\n// const [caption, setCaption] = useState('');\n// const [keyword, setKeyword] = useState('');\n// const [image, setImage] = useState(null); //state for the progress bar\n// const [progress, setProgress] = useState(0);\n//   const [age, setAge] = React.useState('');\n//   const [open1, setOpen1] = React.useState(false);\n\n//   const handleChange1 = (event) => {\n//     setAge(event.target.value);\n//   };\n\n//   const handleClose = () => {\n//     setOpen1(false);\n//   };\n\n//   const handleOpen1 = () => {\n//     setOpen1(true);\n//   };\n\n// //imageupload functions\n// const handleChange =  (e) => {//handleChange function fires off an event\n//   if (e.target.files[0]) { //get the first file you selected\n//       setImage(e.target.files[0]); //set the image in state to that file\n//   }\n// };\n\n// const handleUpload = (event) => {\n//   event.preventDefault(); //avoid refresh when upload button is clicked\n\n//   //access the storage in firebase, get a references to the folder images/ and store image there\n//   const uploadTask = storage.ref(`images/${image.name}`).put(image);\n\n//   uploadTask.on(\n//       \"state_changed\",\n//       /*provide snapshot of the image uploading progress via an equation*/\n//       (snapshot) => {\n//           //progress function ...\n//           const progress = Math.round(\n//               (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n//           );\n//           setProgress(progress);\n//       },\n//       (error) => {\n//           //error function ..\n//           console.log(error);\n//           alert(error.message);\n//       },\n//       () => {\n//           // complete function ...\n//           storage\n//               .ref(\"images\")\n//               .child(image.name)\n//               .getDownloadURL()   //GET DOWNLOAD LINK TO THE IMAGE\n//               .then(url => {\n//                   //post image inside db\n//                   db.collection(\"posts\").add({\n//                       //get server timestamp so images are sorted by time posted\n//                       timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n//                       caption: caption,\n//                       imageUrl: url,\n//                       keyword: keyword,\n//                       username: user.displayName\n//                   });\n\n//                   setProgress(0); //reset progress\n//                   setCaption(\"\");\n//                   setImage(null);\n//               });\n//       }\n//   );\n//   setOpenP(false); //close modal after upload\n// };\n\n\n\n\n\n\n// useEffect(() => {\n  \n//     const unsubscribe = auth.onAuthStateChanged((authUser) => { //listen anytime an authentication change happens\n//       if (authUser) {\n//         //user has logged in...\n//         console.log(authUser);  //check the console if someone is there or not\n//         setUser(authUser); //Cookie tracking to keep you logged in. Captures the user in our state. \n\n//         if (authUser.displayName) {\n//           //dont update username if they dont have a display name\n//         } else {\n//           // if we just created someone...\n//           return authUser.updateProfile({\n//             displayName: username, //set their display name in firebase\n//         });\n//         }\n\n//       } else {\n//         // user has logged out...\n//         setUser(null);\n//       }\n//     })\n\n//     return () => {\n//       //perform some cleanup actions before restarting the useEffect. This to avoid duplicate listeners.\n//       unsubscribe ();\n//     }\n// }, [user, username]);\n\n// //useEffect runs a piece of code based on a specific condition\n// useEffect(() => {\n//   //this is where the code runs\n//   //snapshot is a powerful listener that will run the code when a post is made\n//   db.collection('posts').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n//     //everytime a new post is added, this code fires...\n//     setPosts(snapshot.docs.map(doc => ({\n//       id: doc.id, //the post ids\n//       post: doc.data()\n//     })));\n//   })\n// }, []);//[] symbol means run the code once\n\n// //sign up function. Fired up by the button\n// const signUp = (event) => {\n//   event.preventDefault(); //avoid refresh when sign up button is clicked\n\n//   //verify email\n//   auth.onAuthStateChanged(function (firebaseUser) {\n//     if (firebaseUser) {\n//       firebaseUser.sendEmailVerification().then(function() {\n//         // Email sent.\n//         //alert(\"Your email verification code has been sent\")\n//       }, function(error) {\n//         // An error happened.\n//        alert(error.message)\n//       })\n\n//     } else {\n      \n//     }\n// });\n\n\n// auth\n//     .createUserWithEmailAndPassword(email, password)  //create user\n//     .then((authUser) => {\n//     return authUser.user.updateProfile({\n//     displayName: username\n//     })  \n//   }\n\n//   )\n//   //backend validation is done by firebase\n//   .catch((error) => alert(error.message)) //alert of any errors with a message\n\n//   setOpen(false); //close modal after signing up\n\n  \n// }\n\n\n// //sign in function. Fired up by the button\n// const signIn = (event) => {\n//   event.preventDefault(); //avoid refresh when sign in button is clicked\n\n  \n//   auth\n//   .signInWithEmailAndPassword(email, password)\n//   //backend validation is done by firebase\n//   .catch((error) => alert(error.message)) //alert of any errors with a message\n  \n//   setOpenSignIn(false); //close modal after signing in\n// }\n\n\n\n//   return (\n//     <div className=\"app\">\n//       {/*using BEM naming convetion*/}\n\n\n//       {user?.displayName ?(//access only when user is signed in\n//         <ImageUpload username={user.displayName} />\n//       ):\n//       (\n//           <h7>Sorry you need to login to upload</h7>\n//       )}\n      \n\n\n\n//       <Modal //Sign up Modal\n//         open = {open} //state to keep track if its open\n//         onClose={() => setOpen(false)} //onClose method. closes the model when anywhere else on the screen is clicked\n//       >\n//         <div style={modalStyle} className={classes.paper}>\n//           <form className= \"app__signup\">\n//             <center>\n//               <img\n//                 className=\"app__headerImage\"\n//                 src={logo}\n//                 alt=\"\"\n//                 width=\"50px\"\n//                 height=\"50px\"\n//               />\n//             </center>\n            \n//             <AccountCircleOutlinedIcon/>\n//             <Input \n//                 placeholder = \"username\"\n//                 type=\"text\"\n//                 value={username}\n//                 onChange={(e) => setUsername(e.target.value)}\n//               />\n//               <EmailOutlinedIcon/>\n//               <Input \n//                 placeholder = \"email\"\n//                 type=\"text\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//               />\n//               <LockOutlinedIcon/>\n//               <Input \n//                 placeholder = \"password\"\n//                 type=\"password\"\n//                 value={password}\n//                 onChange={(e) => setPassword(e.target.value)}\n//               />\n//               <button type=\"submit\" onClick={signUp}>Sign Up</button>\n              \n//           </form>\n//         </div>\n//       </Modal>\n  \n\n//       <Modal //Sign Out and Login Modal\n//         open = {openSignIn} //state to keep track if its open\n//         onClose={() => setOpenSignIn(false)} //onClose method. closes the model when anywhere else on the screen is clicked\n//       >\n//         <div style={modalStyle} className={classes.paper}>\n//           <form className= \"app__signup\">\n//             <center>\n//               <img\n//                 className=\"app__headerImage\"\n//                 src={logo}\n//                 alt=\"\"\n//                 width=\"50px\"\n//                 height=\"50px\"\n//               />\n//             </center>\n            \n//             <EmailOutlinedIcon/>\n//               <Input \n//                 placeholder = \"email\"\n//                 type=\"text\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//               />\n              \n//               <LockOutlinedIcon/>\n//               <Input \n//                 placeholder = \"password\"\n//                 type=\"password\"\n//                 value={password}\n//                 onChange={(e) => setPassword(e.target.value)}\n//               />\n              \n//               <button type=\"submit\" onClick={signIn}>Sign In</button>\n              \n//           </form>\n//         </div>\n//       </Modal>\n//       <div>\n      \n      \n//     </div>\n\n// {/* modal for posting*/}\n// <Modal \n//         open = {openP} //state to keep track if its open\n//         onClose={() => setOpenP(false)} //onClose method. closes the model when anywhere else on the screen is clicked\n//       >\n//         <div style={modalStyle} className={classes.paper}>\n//         <div className=\"imageupload\">\n//          <form className= \"app__signup\">\n        \n//               <progress className=\"imageupload__progress\" value={progress} max=\"100\"/>\n//             <input type=\"text\" placeholder='Enter a caption...' onChange={event => setCaption(event.target.value)} value={caption}/>\n//             <FormControl className={classes.formControl}>\n//         <InputLabel id=\"demo-controlled-open-select-label\">Age</InputLabel>\n//         <Select labelId=\"demo-controlled-open-select-label\" id=\"demo-controlled-open-select\" open={open} onClose={handleClose} onOpen={handleOpen1} value={age} onChange={handleChange1}>\n//           <MenuItem value=\"\">\n//             None\n//           </MenuItem>\n//           <MenuItem value={10}>Ten</MenuItem>\n//           <MenuItem value={20}>Twenty</MenuItem>\n//           <MenuItem value={30}>Thirty</MenuItem>\n//         </Select>\n//       </FormControl>\n//             <input type=\"file\" onChange={handleChange} />\n//             <button type=\"submit\" onClick={handleUpload}>\n//               Upload\n//             </button>\n//            </form>\n//         </div>\n//         </div>\n        \n//       </Modal>\n\n\n\n\n\n\n//       <div className=\"app__header\">\n//         <img\n//           className=\"app__headerImage\"\n//           src={logo}\n//           alt=\"\"\n//           width=\"50px\"\n//           height=\"50px\"\n//         />\n//         {user?.displayName? ( //if the user exists, show a Logout button\n//         <button onClick={() => auth.signOut()}>Logout</button>\n//       ):  ( //else, show a sign up button\n//           <div className=\"app__loginContainer\">\n//         <button onClick={() => setOpenSignIn(true)}>Sign In</button>\n//         <button onClick={() => setOpen(true)}>Sign Up</button>\n//         </div>\n//       )}\n//         </div>\n\n      \n//       <div className=\"app__posts\">\n//         <div className= \"app_postsRight\">\n//       {/*Posts*/}\n//       {\n//         /*loop through posts in state*/\n//         posts.map(({id, post}) => (\n//           //the key allows the page to only refresh the new post, not all the posts. since each post has its own key\n//           <Post key={id} postId={id} user= {user} username={post.username} caption={post.caption} imageUrl={post.imageUrl}></Post>\n\n//         ))\n//       }\n//       </div>\n//       </div>\n        \n       \n\n   \n\n\n\n// {user?.displayName ?(//access only when user is signed in\n\n \n//       <div className=\"app__bottom\">\n//       <BottomNavigation>\n//   <BottomNavigationAction label=\"Home\" icon={<HomeOutlinedIcon />} component={Link} to=\"/\" />\n//   <BottomNavigationAction label=\"AddBox\" icon={<AddBoxOutlinedIcon />}onClick={() => setOpenP(true)}/>\n//   <BottomNavigationAction label=\"Notifications\" icon={<NotificationsNoneOutlinedIcon />}/>\n//   <BottomNavigationAction label=\"Account\" icon={<AccountCircleOutlinedIcon />} />\n\n// </BottomNavigation>\n// </div>\n//      ):\n//      (\n//         <h7></h7> //hide nav bar when user is not signed in\n//     )}\n     \n\n//     </div>\n//   );\n// }\n\n// export default Home;"]},"metadata":{},"sourceType":"module"}