{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/okienayonoadu/beej copy 2/src/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './Home.css';\nimport './ImageUpload.css';\nimport logo from './beej.png';\nimport Post from './Post'; //import RecoverAccount from './RecoverAccount';\n\nimport { db, auth } from './firebase';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal'; //import {Button} from '@material-ui/core';\n\nimport { Input } from '@material-ui/core';\nimport ImageUpload from './ImageUpload'; //import VerifyEmail from './VerifyEmail';\n\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\nimport EmailOutlinedIcon from '@material-ui/icons/EmailOutlined';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport HomeOutlinedIcon from '@material-ui/icons/HomeOutlined';\nimport AddBoxOutlinedIcon from '@material-ui/icons/AddBoxOutlined';\nimport NotificationsNoneOutlinedIcon from '@material-ui/icons/NotificationsNoneOutlined';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport { Link, withRouter } from 'react-router-dom';\nimport firebase from \"firebase\";\nimport { storage } from './firebase';\nimport './ImageUpload.css';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\n/*Styling for modal. Code from material-ui.com*/\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3)\n  },\n  button: {\n    display: 'block',\n    marginTop: theme.spacing(2)\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  }\n}));\nexport default function Home() {\n  _s();\n\n  var _user, _user2, _user3;\n\n  const classes = useStyles();\n  const [age, setAge] = React.useState('');\n  const [open, setOpen] = React.useState(false);\n\n  const handleChange = event => {\n    setAge(event.target.value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"//     \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [\"//       \", \"//       \", ((_user = user) === null || _user === void 0 ? void 0 : _user.displayName) ?\n      /*#__PURE__*/\n      //access only when user is signed in\n      _jsxDEV(ImageUpload, {\n        username: user.displayName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"h7\", {\n        children: \"Sorry you need to login to upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal //Sign up Modal\n      , {\n        open: open //state to keep track if its open\n        ,\n        onClose: () => setOpen(false) //onClose method. closes the model when anywhere else on the screen is clicked\n        ,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: modalStyle,\n          className: classes.paper,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"app__signup\",\n            children: [/*#__PURE__*/_jsxDEV(\"center\", {\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"app__headerImage\",\n                src: logo,\n                alt: \"\",\n                width: \"50px\",\n                height: \"50px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(AccountCircleOutlinedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              placeholder: \"username\",\n              type: \"text\",\n              value: username,\n              onChange: e => setUsername(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(EmailOutlinedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              placeholder: \"email\",\n              type: \"text\",\n              value: email,\n              onChange: e => setEmail(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(LockOutlinedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              placeholder: \"password\",\n              type: \"password\",\n              value: password,\n              onChange: e => setPassword(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              onClick: signUp,\n              children: \"Sign Up\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Modal //Sign Out and Login Modal\n      , {\n        open: openSignIn //state to keep track if its open\n        ,\n        onClose: () => setOpenSignIn(false) //onClose method. closes the model when anywhere else on the screen is clicked\n        ,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: modalStyle,\n          className: classes.paper,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"app__signup\",\n            children: [/*#__PURE__*/_jsxDEV(\"center\", {\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"app__headerImage\",\n                src: logo,\n                alt: \"\",\n                width: \"50px\",\n                height: \"50px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(EmailOutlinedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              placeholder: \"email\",\n              type: \"text\",\n              value: email,\n              onChange: e => setEmail(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(LockOutlinedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              placeholder: \"password\",\n              type: \"password\",\n              value: password,\n              onChange: e => setPassword(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              onClick: signIn,\n              children: \"Sign In\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        open: openP //state to keep track if its open\n        ,\n        onClose: () => setOpenP(false) //onClose method. closes the model when anywhere else on the screen is clicked\n        ,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: modalStyle,\n          className: classes.paper,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"imageupload\",\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              className: \"app__signup\",\n              children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n                className: \"imageupload__progress\",\n                value: progress,\n                max: \"100\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Enter a caption...\",\n                onChange: event => setCaption(event.target.value),\n                value: caption\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                className: classes.formControl,\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  id: \"demo-controlled-open-select-label\",\n                  children: \"Age\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 9\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  labelId: \"demo-controlled-open-select-label\",\n                  id: \"demo-controlled-open-select\",\n                  open: open,\n                  onClose: handleClose,\n                  onOpen: handleOpen,\n                  value: age,\n                  onChange: handleChange,\n                  children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: \"\",\n                    children: /*#__PURE__*/_jsxDEV(\"em\", {\n                      children: \"None\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 208,\n                      columnNumber: 13\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 207,\n                    columnNumber: 11\n                  }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: 10,\n                    children: \"Ten\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 11\n                  }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: 20,\n                    children: \"Twenty\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 211,\n                    columnNumber: 11\n                  }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: 30,\n                    children: \"Thirty\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 212,\n                    columnNumber: 11\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 9\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                onChange: handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                onClick: handleUpload,\n                children: \"Upload\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 10\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app__header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"app__headerImage\",\n          src: logo,\n          alt: \"\",\n          width: \"50px\",\n          height: \"50px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 9\n        }, this), ((_user2 = user) === null || _user2 === void 0 ? void 0 : _user2.displayName) ?\n        /*#__PURE__*/\n        //if the user exists, show a Logout button\n        _jsxDEV(\"button\", {\n          onClick: () => auth.signOut(),\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 9\n        }, this) :\n        /*#__PURE__*/\n        //else, show a sign up button\n        _jsxDEV(\"div\", {\n          className: \"app__loginContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setOpenSignIn(true),\n            children: \"Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setOpen(true),\n            children: \"Sign Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app__posts\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"app_postsRight\",\n          children:\n          /*loop through posts in state*/\n          posts.map(({\n            id,\n            post\n          }) =>\n          /*#__PURE__*/\n          //the key allows the page to only refresh the new post, not all the posts. since each post has its own key\n          _jsxDEV(Post, {\n            postId: id,\n            user: user,\n            username: post.username,\n            caption: post.caption,\n            imageUrl: post.imageUrl\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 11\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 7\n      }, this), ((_user3 = user) === null || _user3 === void 0 ? void 0 : _user3.displayName) ?\n      /*#__PURE__*/\n      //access only when user is signed in\n      _jsxDEV(\"div\", {\n        className: \"app__bottom\",\n        children: /*#__PURE__*/_jsxDEV(BottomNavigation, {\n          children: [/*#__PURE__*/_jsxDEV(BottomNavigationAction, {\n            label: \"Home\",\n            icon: /*#__PURE__*/_jsxDEV(HomeOutlinedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 46\n            }, this),\n            component: Link,\n            to: \"/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(BottomNavigationAction, {\n            label: \"AddBox\",\n            icon: /*#__PURE__*/_jsxDEV(AddBoxOutlinedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 48\n            }, this),\n            onClick: () => setOpenP(true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(BottomNavigationAction, {\n            label: \"Notifications\",\n            icon: /*#__PURE__*/_jsxDEV(NotificationsNoneOutlinedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 55\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(BottomNavigationAction, {\n            label: \"Account\",\n            icon: /*#__PURE__*/_jsxDEV(AccountCircleOutlinedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 49\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 3\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 7\n      }, this) : /*#__PURE__*/_jsxDEV(\"h7\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this) //hide nav bar when user is not signed in\n      ]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n} // function Home() {\n// /*states...how you set variables in react*/\n// const classes = useStyles();\n// // getModalStyle is not a pure function, we roll the style only on the first render\n// const [modalStyle] = useState(getModalStyle);\n// const [posts, setPosts] = useState([]);\n// const [open,setOpen] = useState(false);\n// const [openSignIn, setOpenSignIn] = useState(false);\n// const [username,setUsername] = useState('');\n// const [password,setPassword] = useState('');\n// const [email,setEmail] = useState('');\n// const [user,setUser] = useState(null); //state to keep track of the user\n// //IMAGE UPLOAD STATES\n// const [openP,setOpenP] = useState(false);\n// const [caption, setCaption] = useState('');\n// const [keyword, setKeyword] = useState('');\n// const [image, setImage] = useState(null); //state for the progress bar\n// const [progress, setProgress] = useState(0);\n//   const [age, setAge] = React.useState('');\n//   const [open1, setOpen1] = React.useState(false);\n//   const handleChange1 = (event) => {\n//     setAge(event.target.value);\n//   };\n//   const handleClose = () => {\n//     setOpen1(false);\n//   };\n//   const handleOpen1 = () => {\n//     setOpen1(true);\n//   };\n// //imageupload functions\n// const handleChange =  (e) => {//handleChange function fires off an event\n//   if (e.target.files[0]) { //get the first file you selected\n//       setImage(e.target.files[0]); //set the image in state to that file\n//   }\n// };\n// const handleUpload = (event) => {\n//   event.preventDefault(); //avoid refresh when upload button is clicked\n//   //access the storage in firebase, get a references to the folder images/ and store image there\n//   const uploadTask = storage.ref(`images/${image.name}`).put(image);\n//   uploadTask.on(\n//       \"state_changed\",\n//       /*provide snapshot of the image uploading progress via an equation*/\n//       (snapshot) => {\n//           //progress function ...\n//           const progress = Math.round(\n//               (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n//           );\n//           setProgress(progress);\n//       },\n//       (error) => {\n//           //error function ..\n//           console.log(error);\n//           alert(error.message);\n//       },\n//       () => {\n//           // complete function ...\n//           storage\n//               .ref(\"images\")\n//               .child(image.name)\n//               .getDownloadURL()   //GET DOWNLOAD LINK TO THE IMAGE\n//               .then(url => {\n//                   //post image inside db\n//                   db.collection(\"posts\").add({\n//                       //get server timestamp so images are sorted by time posted\n//                       timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n//                       caption: caption,\n//                       imageUrl: url,\n//                       keyword: keyword,\n//                       username: user.displayName\n//                   });\n//                   setProgress(0); //reset progress\n//                   setCaption(\"\");\n//                   setImage(null);\n//               });\n//       }\n//   );\n//   setOpenP(false); //close modal after upload\n// };\n// useEffect(() => {\n//     const unsubscribe = auth.onAuthStateChanged((authUser) => { //listen anytime an authentication change happens\n//       if (authUser) {\n//         //user has logged in...\n//         console.log(authUser);  //check the console if someone is there or not\n//         setUser(authUser); //Cookie tracking to keep you logged in. Captures the user in our state. \n//         if (authUser.displayName) {\n//           //dont update username if they dont have a display name\n//         } else {\n//           // if we just created someone...\n//           return authUser.updateProfile({\n//             displayName: username, //set their display name in firebase\n//         });\n//         }\n//       } else {\n//         // user has logged out...\n//         setUser(null);\n//       }\n//     })\n//     return () => {\n//       //perform some cleanup actions before restarting the useEffect. This to avoid duplicate listeners.\n//       unsubscribe ();\n//     }\n// }, [user, username]);\n// //useEffect runs a piece of code based on a specific condition\n// useEffect(() => {\n//   //this is where the code runs\n//   //snapshot is a powerful listener that will run the code when a post is made\n//   db.collection('posts').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n//     //everytime a new post is added, this code fires...\n//     setPosts(snapshot.docs.map(doc => ({\n//       id: doc.id, //the post ids\n//       post: doc.data()\n//     })));\n//   })\n// }, []);//[] symbol means run the code once\n// //sign up function. Fired up by the button\n// const signUp = (event) => {\n//   event.preventDefault(); //avoid refresh when sign up button is clicked\n//   //verify email\n//   auth.onAuthStateChanged(function (firebaseUser) {\n//     if (firebaseUser) {\n//       firebaseUser.sendEmailVerification().then(function() {\n//         // Email sent.\n//         //alert(\"Your email verification code has been sent\")\n//       }, function(error) {\n//         // An error happened.\n//        alert(error.message)\n//       })\n//     } else {\n//     }\n// });\n// auth\n//     .createUserWithEmailAndPassword(email, password)  //create user\n//     .then((authUser) => {\n//     return authUser.user.updateProfile({\n//     displayName: username\n//     })  \n//   }\n//   )\n//   //backend validation is done by firebase\n//   .catch((error) => alert(error.message)) //alert of any errors with a message\n//   setOpen(false); //close modal after signing up\n// }\n// //sign in function. Fired up by the button\n// const signIn = (event) => {\n//   event.preventDefault(); //avoid refresh when sign in button is clicked\n//   auth\n//   .signInWithEmailAndPassword(email, password)\n//   //backend validation is done by firebase\n//   .catch((error) => alert(error.message)) //alert of any errors with a message\n//   setOpenSignIn(false); //close modal after signing in\n// }\n//   return (\n//     <div className=\"app\">\n//       {/*using BEM naming convetion*/}\n//       {user?.displayName ?(//access only when user is signed in\n//         <ImageUpload username={user.displayName} />\n//       ):\n//       (\n//           <h7>Sorry you need to login to upload</h7>\n//       )}\n//       <Modal //Sign up Modal\n//         open = {open} //state to keep track if its open\n//         onClose={() => setOpen(false)} //onClose method. closes the model when anywhere else on the screen is clicked\n//       >\n//         <div style={modalStyle} className={classes.paper}>\n//           <form className= \"app__signup\">\n//             <center>\n//               <img\n//                 className=\"app__headerImage\"\n//                 src={logo}\n//                 alt=\"\"\n//                 width=\"50px\"\n//                 height=\"50px\"\n//               />\n//             </center>\n//             <AccountCircleOutlinedIcon/>\n//             <Input \n//                 placeholder = \"username\"\n//                 type=\"text\"\n//                 value={username}\n//                 onChange={(e) => setUsername(e.target.value)}\n//               />\n//               <EmailOutlinedIcon/>\n//               <Input \n//                 placeholder = \"email\"\n//                 type=\"text\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//               />\n//               <LockOutlinedIcon/>\n//               <Input \n//                 placeholder = \"password\"\n//                 type=\"password\"\n//                 value={password}\n//                 onChange={(e) => setPassword(e.target.value)}\n//               />\n//               <button type=\"submit\" onClick={signUp}>Sign Up</button>\n//           </form>\n//         </div>\n//       </Modal>\n//       <Modal //Sign Out and Login Modal\n//         open = {openSignIn} //state to keep track if its open\n//         onClose={() => setOpenSignIn(false)} //onClose method. closes the model when anywhere else on the screen is clicked\n//       >\n//         <div style={modalStyle} className={classes.paper}>\n//           <form className= \"app__signup\">\n//             <center>\n//               <img\n//                 className=\"app__headerImage\"\n//                 src={logo}\n//                 alt=\"\"\n//                 width=\"50px\"\n//                 height=\"50px\"\n//               />\n//             </center>\n//             <EmailOutlinedIcon/>\n//               <Input \n//                 placeholder = \"email\"\n//                 type=\"text\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//               />\n//               <LockOutlinedIcon/>\n//               <Input \n//                 placeholder = \"password\"\n//                 type=\"password\"\n//                 value={password}\n//                 onChange={(e) => setPassword(e.target.value)}\n//               />\n//               <button type=\"submit\" onClick={signIn}>Sign In</button>\n//           </form>\n//         </div>\n//       </Modal>\n//       <div>\n//     </div>\n// {/* modal for posting*/}\n// <Modal \n//         open = {openP} //state to keep track if its open\n//         onClose={() => setOpenP(false)} //onClose method. closes the model when anywhere else on the screen is clicked\n//       >\n//         <div style={modalStyle} className={classes.paper}>\n//         <div className=\"imageupload\">\n//          <form className= \"app__signup\">\n//               <progress className=\"imageupload__progress\" value={progress} max=\"100\"/>\n//             <input type=\"text\" placeholder='Enter a caption...' onChange={event => setCaption(event.target.value)} value={caption}/>\n//             <FormControl className={classes.formControl}>\n//         <InputLabel id=\"demo-controlled-open-select-label\">Age</InputLabel>\n//         <Select labelId=\"demo-controlled-open-select-label\" id=\"demo-controlled-open-select\" open={open} onClose={handleClose} onOpen={handleOpen1} value={age} onChange={handleChange1}>\n//           <MenuItem value=\"\">\n//             None\n//           </MenuItem>\n//           <MenuItem value={10}>Ten</MenuItem>\n//           <MenuItem value={20}>Twenty</MenuItem>\n//           <MenuItem value={30}>Thirty</MenuItem>\n//         </Select>\n//       </FormControl>\n//             <input type=\"file\" onChange={handleChange} />\n//             <button type=\"submit\" onClick={handleUpload}>\n//               Upload\n//             </button>\n//            </form>\n//         </div>\n//         </div>\n//       </Modal>\n//       <div className=\"app__header\">\n//         <img\n//           className=\"app__headerImage\"\n//           src={logo}\n//           alt=\"\"\n//           width=\"50px\"\n//           height=\"50px\"\n//         />\n//         {user?.displayName? ( //if the user exists, show a Logout button\n//         <button onClick={() => auth.signOut()}>Logout</button>\n//       ):  ( //else, show a sign up button\n//           <div className=\"app__loginContainer\">\n//         <button onClick={() => setOpenSignIn(true)}>Sign In</button>\n//         <button onClick={() => setOpen(true)}>Sign Up</button>\n//         </div>\n//       )}\n//         </div>\n//       <div className=\"app__posts\">\n//         <div className= \"app_postsRight\">\n//       {/*Posts*/}\n//       {\n//         /*loop through posts in state*/\n//         posts.map(({id, post}) => (\n//           //the key allows the page to only refresh the new post, not all the posts. since each post has its own key\n//           <Post key={id} postId={id} user= {user} username={post.username} caption={post.caption} imageUrl={post.imageUrl}></Post>\n//         ))\n//       }\n//       </div>\n//       </div>\n// {user?.displayName ?(//access only when user is signed in\n//       <div className=\"app__bottom\">\n//       <BottomNavigation>\n//   <BottomNavigationAction label=\"Home\" icon={<HomeOutlinedIcon />} component={Link} to=\"/\" />\n//   <BottomNavigationAction label=\"AddBox\" icon={<AddBoxOutlinedIcon />}onClick={() => setOpenP(true)}/>\n//   <BottomNavigationAction label=\"Notifications\" icon={<NotificationsNoneOutlinedIcon />}/>\n//   <BottomNavigationAction label=\"Account\" icon={<AccountCircleOutlinedIcon />} />\n// </BottomNavigation>\n// </div>\n//      ):\n//      (\n//         <h7></h7> //hide nav bar when user is not signed in\n//     )}\n//     </div>\n//   );\n// }\n// export default Home;\n\n_s(Home, \"kY2kimeFWj34UZ4+rj83gEaUHuI=\", false, function () {\n  return [useStyles];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/okienayonoadu/beej copy 2/src/Home.js"],"names":["React","useState","useEffect","logo","Post","db","auth","makeStyles","Modal","Input","ImageUpload","AccountCircleOutlinedIcon","EmailOutlinedIcon","LockOutlinedIcon","BottomNavigation","HomeOutlinedIcon","AddBoxOutlinedIcon","NotificationsNoneOutlinedIcon","BottomNavigationAction","Link","withRouter","firebase","storage","InputLabel","MenuItem","FormControl","Select","Button","getModalStyle","top","left","transform","useStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","button","display","marginTop","formControl","margin","minWidth","Home","classes","age","setAge","open","setOpen","handleChange","event","target","value","handleClose","handleOpen","user","displayName","modalStyle","username","e","setUsername","email","setEmail","password","setPassword","signUp","openSignIn","setOpenSignIn","signIn","openP","setOpenP","progress","setCaption","caption","handleUpload","signOut","posts","map","id","post","imageUrl"],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;;GAzmBwB3B,I;UACNnB,S;;;KADMmB,I","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport './Home.css';\nimport './ImageUpload.css';\nimport logo from './beej.png';\nimport Post from './Post';\n//import RecoverAccount from './RecoverAccount';\nimport {db, auth} from './firebase';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\n//import {Button} from '@material-ui/core';\nimport {Input} from '@material-ui/core';\nimport ImageUpload from './ImageUpload';\n//import VerifyEmail from './VerifyEmail';\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\nimport EmailOutlinedIcon from '@material-ui/icons/EmailOutlined';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\n\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport HomeOutlinedIcon from '@material-ui/icons/HomeOutlined';\nimport AddBoxOutlinedIcon from '@material-ui/icons/AddBoxOutlined';\nimport NotificationsNoneOutlinedIcon from '@material-ui/icons/NotificationsNoneOutlined';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\n \nimport {Link, withRouter} from 'react-router-dom';\n\nimport firebase from \"firebase\";\nimport {storage} from './firebase';\nimport './ImageUpload.css';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\n\n\n/*Styling for modal. Code from material-ui.com*/\nfunction getModalStyle() {\n  const top = 50\n  const left = 50\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n  button: {\n    display: 'block',\n    marginTop: theme.spacing(2),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n}));\n\nexport default function Home() {\n  const classes = useStyles();\n  const [age, setAge] = React.useState('');\n  const [open, setOpen] = React.useState(false);\n\n  const handleChange = (event) => {\n    setAge(event.target.value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  return (\n    <div>\n      //     <div className=\"app\">\n//       {/*using BEM naming convetion*/}\n\n\n//       {user?.displayName ?(//access only when user is signed in\n        <ImageUpload username={user.displayName} />\n      ):\n      (\n          <h7>Sorry you need to login to upload</h7>\n      )}\n      \n\n\n\n      <Modal //Sign up Modal\n        open = {open} //state to keep track if its open\n        onClose={() => setOpen(false)} //onClose method. closes the model when anywhere else on the screen is clicked\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className= \"app__signup\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src={logo}\n                alt=\"\"\n                width=\"50px\"\n                height=\"50px\"\n              />\n            </center>\n            \n            <AccountCircleOutlinedIcon/>\n            <Input \n                placeholder = \"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n              />\n              <EmailOutlinedIcon/>\n              <Input \n                placeholder = \"email\"\n                type=\"text\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n              <LockOutlinedIcon/>\n              <Input \n                placeholder = \"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n              <button type=\"submit\" onClick={signUp}>Sign Up</button>\n              \n          </form>\n        </div>\n      </Modal>\n  \n\n      <Modal //Sign Out and Login Modal\n        open = {openSignIn} //state to keep track if its open\n        onClose={() => setOpenSignIn(false)} //onClose method. closes the model when anywhere else on the screen is clicked\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className= \"app__signup\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src={logo}\n                alt=\"\"\n                width=\"50px\"\n                height=\"50px\"\n              />\n            </center>\n            \n            <EmailOutlinedIcon/>\n              <Input \n                placeholder = \"email\"\n                type=\"text\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n              \n              <LockOutlinedIcon/>\n              <Input \n                placeholder = \"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n              \n              <button type=\"submit\" onClick={signIn}>Sign In</button>\n              \n          </form>\n        </div>\n      </Modal>\n      <div>\n      \n      \n    </div>\n\n{/* modal for posting*/}\n<Modal \n        open = {openP} //state to keep track if its open\n        onClose={() => setOpenP(false)} //onClose method. closes the model when anywhere else on the screen is clicked\n      >\n        <div style={modalStyle} className={classes.paper}>\n        <div className=\"imageupload\">\n         <form className= \"app__signup\">\n        \n              <progress className=\"imageupload__progress\" value={progress} max=\"100\"/>\n            <input type=\"text\" placeholder='Enter a caption...' onChange={event => setCaption(event.target.value)} value={caption}/>\n            <FormControl className={classes.formControl}>\n        <InputLabel id=\"demo-controlled-open-select-label\">Age</InputLabel>\n        <Select\n          labelId=\"demo-controlled-open-select-label\"\n          id=\"demo-controlled-open-select\"\n          open={open}\n          onClose={handleClose}\n          onOpen={handleOpen}\n          value={age}\n          onChange={handleChange}\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          <MenuItem value={10}>Ten</MenuItem>\n          <MenuItem value={20}>Twenty</MenuItem>\n          <MenuItem value={30}>Thirty</MenuItem>\n        </Select>\n      </FormControl>\n            <input type=\"file\" onChange={handleChange} />\n            <button type=\"submit\" onClick={handleUpload}>\n              Upload\n            </button>\n           </form>\n        </div>\n        </div>\n        \n      </Modal>\n\n\n\n\n\n\n      <div className=\"app__header\">\n        <img\n          className=\"app__headerImage\"\n          src={logo}\n          alt=\"\"\n          width=\"50px\"\n          height=\"50px\"\n        />\n        {user?.displayName? ( //if the user exists, show a Logout button\n        <button onClick={() => auth.signOut()}>Logout</button>\n      ):  ( //else, show a sign up button\n          <div className=\"app__loginContainer\">\n        <button onClick={() => setOpenSignIn(true)}>Sign In</button>\n        <button onClick={() => setOpen(true)}>Sign Up</button>\n        </div>\n      )}\n        </div>\n\n      \n      <div className=\"app__posts\">\n        <div className= \"app_postsRight\">\n      {/*Posts*/}\n      {\n        /*loop through posts in state*/\n        posts.map(({id, post}) => (\n          //the key allows the page to only refresh the new post, not all the posts. since each post has its own key\n          <Post key={id} postId={id} user= {user} username={post.username} caption={post.caption} imageUrl={post.imageUrl}></Post>\n\n        ))\n      }\n      </div>\n      </div>\n        \n       \n\n   \n\n\n\n{user?.displayName ?(//access only when user is signed in\n\n \n      <div className=\"app__bottom\">\n      <BottomNavigation>\n  <BottomNavigationAction label=\"Home\" icon={<HomeOutlinedIcon />} component={Link} to=\"/\" />\n  <BottomNavigationAction label=\"AddBox\" icon={<AddBoxOutlinedIcon />}onClick={() => setOpenP(true)}/>\n  <BottomNavigationAction label=\"Notifications\" icon={<NotificationsNoneOutlinedIcon />}/>\n  <BottomNavigationAction label=\"Account\" icon={<AccountCircleOutlinedIcon />} />\n\n</BottomNavigation>\n</div>\n     ):\n     (\n        <h7></h7> //hide nav bar when user is not signed in\n    )}\n     \n\n    </div>\n     \n    </div>\n  );\n}\n\n// function Home() {\n// /*states...how you set variables in react*/\n// const classes = useStyles();\n// // getModalStyle is not a pure function, we roll the style only on the first render\n// const [modalStyle] = useState(getModalStyle);\n\n// const [posts, setPosts] = useState([]);\n// const [open,setOpen] = useState(false);\n// const [openSignIn, setOpenSignIn] = useState(false);\n// const [username,setUsername] = useState('');\n// const [password,setPassword] = useState('');\n// const [email,setEmail] = useState('');\n// const [user,setUser] = useState(null); //state to keep track of the user\n\n\n// //IMAGE UPLOAD STATES\n// const [openP,setOpenP] = useState(false);\n// const [caption, setCaption] = useState('');\n// const [keyword, setKeyword] = useState('');\n// const [image, setImage] = useState(null); //state for the progress bar\n// const [progress, setProgress] = useState(0);\n//   const [age, setAge] = React.useState('');\n//   const [open1, setOpen1] = React.useState(false);\n\n//   const handleChange1 = (event) => {\n//     setAge(event.target.value);\n//   };\n\n//   const handleClose = () => {\n//     setOpen1(false);\n//   };\n\n//   const handleOpen1 = () => {\n//     setOpen1(true);\n//   };\n\n// //imageupload functions\n// const handleChange =  (e) => {//handleChange function fires off an event\n//   if (e.target.files[0]) { //get the first file you selected\n//       setImage(e.target.files[0]); //set the image in state to that file\n//   }\n// };\n\n// const handleUpload = (event) => {\n//   event.preventDefault(); //avoid refresh when upload button is clicked\n\n//   //access the storage in firebase, get a references to the folder images/ and store image there\n//   const uploadTask = storage.ref(`images/${image.name}`).put(image);\n\n//   uploadTask.on(\n//       \"state_changed\",\n//       /*provide snapshot of the image uploading progress via an equation*/\n//       (snapshot) => {\n//           //progress function ...\n//           const progress = Math.round(\n//               (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n//           );\n//           setProgress(progress);\n//       },\n//       (error) => {\n//           //error function ..\n//           console.log(error);\n//           alert(error.message);\n//       },\n//       () => {\n//           // complete function ...\n//           storage\n//               .ref(\"images\")\n//               .child(image.name)\n//               .getDownloadURL()   //GET DOWNLOAD LINK TO THE IMAGE\n//               .then(url => {\n//                   //post image inside db\n//                   db.collection(\"posts\").add({\n//                       //get server timestamp so images are sorted by time posted\n//                       timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n//                       caption: caption,\n//                       imageUrl: url,\n//                       keyword: keyword,\n//                       username: user.displayName\n//                   });\n\n//                   setProgress(0); //reset progress\n//                   setCaption(\"\");\n//                   setImage(null);\n//               });\n//       }\n//   );\n//   setOpenP(false); //close modal after upload\n// };\n\n\n\n\n\n\n// useEffect(() => {\n  \n//     const unsubscribe = auth.onAuthStateChanged((authUser) => { //listen anytime an authentication change happens\n//       if (authUser) {\n//         //user has logged in...\n//         console.log(authUser);  //check the console if someone is there or not\n//         setUser(authUser); //Cookie tracking to keep you logged in. Captures the user in our state. \n\n//         if (authUser.displayName) {\n//           //dont update username if they dont have a display name\n//         } else {\n//           // if we just created someone...\n//           return authUser.updateProfile({\n//             displayName: username, //set their display name in firebase\n//         });\n//         }\n\n//       } else {\n//         // user has logged out...\n//         setUser(null);\n//       }\n//     })\n\n//     return () => {\n//       //perform some cleanup actions before restarting the useEffect. This to avoid duplicate listeners.\n//       unsubscribe ();\n//     }\n// }, [user, username]);\n\n// //useEffect runs a piece of code based on a specific condition\n// useEffect(() => {\n//   //this is where the code runs\n//   //snapshot is a powerful listener that will run the code when a post is made\n//   db.collection('posts').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n//     //everytime a new post is added, this code fires...\n//     setPosts(snapshot.docs.map(doc => ({\n//       id: doc.id, //the post ids\n//       post: doc.data()\n//     })));\n//   })\n// }, []);//[] symbol means run the code once\n\n// //sign up function. Fired up by the button\n// const signUp = (event) => {\n//   event.preventDefault(); //avoid refresh when sign up button is clicked\n\n//   //verify email\n//   auth.onAuthStateChanged(function (firebaseUser) {\n//     if (firebaseUser) {\n//       firebaseUser.sendEmailVerification().then(function() {\n//         // Email sent.\n//         //alert(\"Your email verification code has been sent\")\n//       }, function(error) {\n//         // An error happened.\n//        alert(error.message)\n//       })\n\n//     } else {\n      \n//     }\n// });\n\n\n// auth\n//     .createUserWithEmailAndPassword(email, password)  //create user\n//     .then((authUser) => {\n//     return authUser.user.updateProfile({\n//     displayName: username\n//     })  \n//   }\n\n//   )\n//   //backend validation is done by firebase\n//   .catch((error) => alert(error.message)) //alert of any errors with a message\n\n//   setOpen(false); //close modal after signing up\n\n  \n// }\n\n\n// //sign in function. Fired up by the button\n// const signIn = (event) => {\n//   event.preventDefault(); //avoid refresh when sign in button is clicked\n\n  \n//   auth\n//   .signInWithEmailAndPassword(email, password)\n//   //backend validation is done by firebase\n//   .catch((error) => alert(error.message)) //alert of any errors with a message\n  \n//   setOpenSignIn(false); //close modal after signing in\n// }\n\n\n\n//   return (\n//     <div className=\"app\">\n//       {/*using BEM naming convetion*/}\n\n\n//       {user?.displayName ?(//access only when user is signed in\n//         <ImageUpload username={user.displayName} />\n//       ):\n//       (\n//           <h7>Sorry you need to login to upload</h7>\n//       )}\n      \n\n\n\n//       <Modal //Sign up Modal\n//         open = {open} //state to keep track if its open\n//         onClose={() => setOpen(false)} //onClose method. closes the model when anywhere else on the screen is clicked\n//       >\n//         <div style={modalStyle} className={classes.paper}>\n//           <form className= \"app__signup\">\n//             <center>\n//               <img\n//                 className=\"app__headerImage\"\n//                 src={logo}\n//                 alt=\"\"\n//                 width=\"50px\"\n//                 height=\"50px\"\n//               />\n//             </center>\n            \n//             <AccountCircleOutlinedIcon/>\n//             <Input \n//                 placeholder = \"username\"\n//                 type=\"text\"\n//                 value={username}\n//                 onChange={(e) => setUsername(e.target.value)}\n//               />\n//               <EmailOutlinedIcon/>\n//               <Input \n//                 placeholder = \"email\"\n//                 type=\"text\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//               />\n//               <LockOutlinedIcon/>\n//               <Input \n//                 placeholder = \"password\"\n//                 type=\"password\"\n//                 value={password}\n//                 onChange={(e) => setPassword(e.target.value)}\n//               />\n//               <button type=\"submit\" onClick={signUp}>Sign Up</button>\n              \n//           </form>\n//         </div>\n//       </Modal>\n  \n\n//       <Modal //Sign Out and Login Modal\n//         open = {openSignIn} //state to keep track if its open\n//         onClose={() => setOpenSignIn(false)} //onClose method. closes the model when anywhere else on the screen is clicked\n//       >\n//         <div style={modalStyle} className={classes.paper}>\n//           <form className= \"app__signup\">\n//             <center>\n//               <img\n//                 className=\"app__headerImage\"\n//                 src={logo}\n//                 alt=\"\"\n//                 width=\"50px\"\n//                 height=\"50px\"\n//               />\n//             </center>\n            \n//             <EmailOutlinedIcon/>\n//               <Input \n//                 placeholder = \"email\"\n//                 type=\"text\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//               />\n              \n//               <LockOutlinedIcon/>\n//               <Input \n//                 placeholder = \"password\"\n//                 type=\"password\"\n//                 value={password}\n//                 onChange={(e) => setPassword(e.target.value)}\n//               />\n              \n//               <button type=\"submit\" onClick={signIn}>Sign In</button>\n              \n//           </form>\n//         </div>\n//       </Modal>\n//       <div>\n      \n      \n//     </div>\n\n// {/* modal for posting*/}\n// <Modal \n//         open = {openP} //state to keep track if its open\n//         onClose={() => setOpenP(false)} //onClose method. closes the model when anywhere else on the screen is clicked\n//       >\n//         <div style={modalStyle} className={classes.paper}>\n//         <div className=\"imageupload\">\n//          <form className= \"app__signup\">\n        \n//               <progress className=\"imageupload__progress\" value={progress} max=\"100\"/>\n//             <input type=\"text\" placeholder='Enter a caption...' onChange={event => setCaption(event.target.value)} value={caption}/>\n//             <FormControl className={classes.formControl}>\n//         <InputLabel id=\"demo-controlled-open-select-label\">Age</InputLabel>\n//         <Select labelId=\"demo-controlled-open-select-label\" id=\"demo-controlled-open-select\" open={open} onClose={handleClose} onOpen={handleOpen1} value={age} onChange={handleChange1}>\n//           <MenuItem value=\"\">\n//             None\n//           </MenuItem>\n//           <MenuItem value={10}>Ten</MenuItem>\n//           <MenuItem value={20}>Twenty</MenuItem>\n//           <MenuItem value={30}>Thirty</MenuItem>\n//         </Select>\n//       </FormControl>\n//             <input type=\"file\" onChange={handleChange} />\n//             <button type=\"submit\" onClick={handleUpload}>\n//               Upload\n//             </button>\n//            </form>\n//         </div>\n//         </div>\n        \n//       </Modal>\n\n\n\n\n\n\n//       <div className=\"app__header\">\n//         <img\n//           className=\"app__headerImage\"\n//           src={logo}\n//           alt=\"\"\n//           width=\"50px\"\n//           height=\"50px\"\n//         />\n//         {user?.displayName? ( //if the user exists, show a Logout button\n//         <button onClick={() => auth.signOut()}>Logout</button>\n//       ):  ( //else, show a sign up button\n//           <div className=\"app__loginContainer\">\n//         <button onClick={() => setOpenSignIn(true)}>Sign In</button>\n//         <button onClick={() => setOpen(true)}>Sign Up</button>\n//         </div>\n//       )}\n//         </div>\n\n      \n//       <div className=\"app__posts\">\n//         <div className= \"app_postsRight\">\n//       {/*Posts*/}\n//       {\n//         /*loop through posts in state*/\n//         posts.map(({id, post}) => (\n//           //the key allows the page to only refresh the new post, not all the posts. since each post has its own key\n//           <Post key={id} postId={id} user= {user} username={post.username} caption={post.caption} imageUrl={post.imageUrl}></Post>\n\n//         ))\n//       }\n//       </div>\n//       </div>\n        \n       \n\n   \n\n\n\n// {user?.displayName ?(//access only when user is signed in\n\n \n//       <div className=\"app__bottom\">\n//       <BottomNavigation>\n//   <BottomNavigationAction label=\"Home\" icon={<HomeOutlinedIcon />} component={Link} to=\"/\" />\n//   <BottomNavigationAction label=\"AddBox\" icon={<AddBoxOutlinedIcon />}onClick={() => setOpenP(true)}/>\n//   <BottomNavigationAction label=\"Notifications\" icon={<NotificationsNoneOutlinedIcon />}/>\n//   <BottomNavigationAction label=\"Account\" icon={<AccountCircleOutlinedIcon />} />\n\n// </BottomNavigation>\n// </div>\n//      ):\n//      (\n//         <h7></h7> //hide nav bar when user is not signed in\n//     )}\n     \n\n//     </div>\n//   );\n// }\n\n// export default Home;"]},"metadata":{},"sourceType":"module"}